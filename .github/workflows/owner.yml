name: Status Management
on:
  push:
    branches:
      - master
jobs:
  job1:
    name: Failed job
    runs-on: ubuntu-latest
    steps:
      - name: Step 1
        run: |
          echo "Job failed on purpose"
          cat foo
      - name: Record job status
        id: job_status
        if: always()
        run: |
          LOC="${{ runner.temp }}/status"
          mkdir -p $LOC
          echo "${{ job.status }}" > $LOC/job1
          echo "::set-output name=location::$LOC"
      - name: Save job status
        if: always()
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          key: job1-job-${{ github.run_number }}
          path: ${{ steps.job_status.outputs.location }}
  job11:
    name: Dependent job
    if: success()
    needs:
      - job1
    runs-on: ubuntu-latest
    steps:
      - name: Record job status
        id: job_status
        if: always()
        run: |
          LOC="${{ runner.temp }}/status"
          mkdir -p $LOC
          echo "${{ job.status }}" > $LOC/job11
          echo "::set-output name=location::$LOC"
      - name: Save job status
        if: always()
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          key: job11-job-${{ github.run_number }}
          path: ${{ steps.job_status.outputs.location }}  
  job2:
    name: Job 2
    runs-on: ubuntu-latest
    steps:
      - name: Step 1
        run: |
          echo "${{ toJson(job) }}"
      - name: Record job status
        id: job_status
        if: always()
        run: |
          LOC="${{ runner.temp }}/status"
          mkdir -p $LOC
          echo "${{ job.status }}" > $LOC/job2
          echo "::set-output name=location::$LOC"
      - name: Save job status
        if: always()
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          key: job2-job-${{ github.run_number }}
          path: ${{ steps.job_status.outputs.location }}
  notify:
    if: always()
    name: Notify
    needs:
      - job1
      - job2
      - job11
    runs-on: ubuntu-latest
    env:
      ALL_JOBS: "job1 job2 job11"
    steps:
      - name: Collect job 1 status
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          key: job1-job-${{ github.run_number }}
          path: ${{ runner.temp }}/status
      - name: Collect job 2 status
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          key: job2-job-${{ github.run_number }}
          path: ${{ runner.temp }}/status
      - name: Collect job 11 status
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          key: job11-job-${{ github.run_number }}
          path: ${{ runner.temp }}/status
      - name: Notify
        run: |
          echo "${{ github.repository }}"
          jobs=($(echo ${{ env.ALL_JOBS }}))
          # check if all jobs are success
          workflow_status="Success"
          for j in $jobs; do
            echo "Checking job status [$j]"
            status=$(cat cat ${{ runner.temp }}/status/$j || echo "NotRun")
            echo "$j : $status"
            if [ "$status" != "Success" ]; then
              workflow_status="Failure"
            fi
          done
          echo "${{ github.workflow }} Run #${{ github.run_number }}: $workflow_status"          