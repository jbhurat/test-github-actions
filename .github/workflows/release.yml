on:
  push:
    tags:
      - 'v*'

name: Release

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-latest
    steps:
      - name: Extract tag name
        id: tag
        run: |
          echo "::set-output name=value::${GITHUB_REF##*/}"
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Extract release notes
        id: release_notes
        run: |
          text=$(awk '/^## ${{ steps.tag.outputs.value }}$/{flag=1;next}/^##/{flag=0}flag' CHANGELOG.md)
          if [[ "$text" == "" ]]; then
            echo "::error file=CHANGELOG.md::There is no release notes for ${{ steps.tag.outputs.value }}"
            exit 1
          fi
          text="${text//'%'/'%25'}"
          text="${text//$'\n'/'%0A'}"
          text="${text//$'\r'/'%0D'}"
          echo "::set-output name=value::$text"
      - name: Create ${{ steps.tag.outputs.value }} release
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.tag.outputs.value }}
          body: |
            ${{ steps.release_notes.outputs.value }}
          draft: true
          prerelease: false
      - name: Write upload_url
        run: |
          echo ${{ steps.create_release.outputs.upload_url }} > upload_url.txt
      - name: Persist upload_url
        uses: actions/upload-artifact@v1
        with:
          name: release_asset_upload_url
          path: upload_url.txt
  build:
    name: Build and upload binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Extract tag name
        id: tag
        run: |
          echo "::set-output name=value::${GITHUB_REF##*/}"
      - name: Retrieve persisted upload_url
        uses: actions/download-artifact@v1
        with:
          name: release_asset_upload_url
      - name: Read upload_url
        id: upload_url
        run: |
          text=$(cat release_asset_upload_url)
          echo "::set-output name=value::$text"
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Build binary
        run: |
          echo "TBD"
      - name: Upload binary
        id: upload_binaries
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          upload_url: ${{ steps.upload_url.outputs.value }}
          asset_path: ./dist/something.zip
          asset_name: something_${{ steps.tag.outputs.value }}_${{ matrix.os }}.zip
          asset_content_type: application/zip