name: Status Management using script
on:
  push:
    tags:
        - 'v*'  
    branches:
      - master
jobs:
  job1:
    name: Some job ${{ matrix.tag }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tag:
          - 't1'
          - 't2'
    steps:
      - name: Run
        id: run
        run: |
          foo="-Dbar.foo=xxx::yyy"
          echo "::set-output name=foo::$foo"
      - name: Print
        run: |
          echo "${{ steps.run.outputs.foo }}"
  job11:
    name: Dependent job
    if: success()
    needs:
      - job1
    runs-on: ubuntu-latest
    steps:
      - name: Download
        uses: actions/download-artifact@6b4fc099 # v2-Preview
      - name: Echo 
        run: |
          ls -lha */*
          cat f-t1/t1.txt
          cat f-t2/t2.txt
  job2:
    name: Job 2
    runs-on: ubuntu-latest
    steps:
      - name: Step 1
        run: |
          echo "${{ toJson(job) }}"
  job3:
    name: Job 3
    runs-on: ubuntu-latest
    steps:
      - name: Step 1
        run: |
            echo "${{ toJson(job) }}"
  job4:
    name: Job 4
    needs:
      - job3
    runs-on: ubuntu-latest
    steps:
      - name: Step 1
        run: |
            echo "${{ toJson(job) }}"
  notify:
    if: always()
    name: Notify
    needs:
      - job1
      - job2
      - job11
      - job3
      - job4
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Slack message
        id: status
        uses: actions/github-script@0.8.0
        with:
          script: |
            ////////////////////////////////////
            // retrieve workflow run data
            ////////////////////////////////////

            console.log("get workflow run")
            const wf_run = await github.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.run_id }}
            })
            console.log("get jobs for workflow run:", wf_run.data.jobs_url)
            const jobs_response = await github.request(wf_run.data.jobs_url)

            ////////////////////////////////////
            // build slack notification message
            ////////////////////////////////////
            
            // some utility functions
            var date_diff_func = function(start, end) {
                var duration = end - start
                // format the duration 
                var delta = duration / 1000
                var days = Math.floor(delta / 86400)
                delta -= days * 86400
                var hours = Math.floor(delta / 3600) % 24
                delta -= hours * 3600
                var minutes = Math.floor(delta / 60) % 60
                delta -= minutes * 60
                var seconds = Math.floor(delta % 60)
                var format_func = function(v, text, check) {
                    if (v <= 0 && check) {
                        return ""
                    } else {
                        return v + text
                    }
                }
                return format_func(days, "d", true) + format_func(hours, "h", true) + format_func(minutes, "m", true) + format_func(seconds, "s", false)
            }
            var status_icon_func = function(s) {
                switch (s) {
                case "w_success":
                    return ":white_check_mark:"
                case "w_failure":
                    return ":no_entry:"
                case "success":
                    return "\u2713"
                case "failure":
                    return "\u2717"
                default:
                    return "\u2013"
                }
            }
            const commit = "${{ github.sha }}".substr(0, 6)

            // build the message
            var fields = []
            var workflow_status = "w_success"
            for (j of jobs_response.data.jobs) {
                console.log(j.name, ":", j.status, j.conclusion, j.started_at, j.completed_at)
                // ignore the current job running this script
                if (j.status != "completed") {
                    continue
                }
                if (j.conclusion == "failure") {
                    workflow_status = "w_failure"
                }
                fields.push({
                    type: "mrkdwn",
                    text: status_icon_func(j.conclusion) + " <" + j.html_url + "|*" + j.name + "*>\n  \u21b3 completed in " + date_diff_func(new Date(j.started_at), new Date(j.completed_at))
                })
            }
            
            var slack_msg = {
                blocks: [
                    {
                        type: "section",
                        text: {
                            type: "mrkdwn",
                            text: "<https://github.com/${{ github.repository }}|*${{ github.repository }}*>\nfrom *${{ github.ref }}@" + commit + "*"
                        }
                    },
                    {
                        type: "section",
                        text: {
                            type: "mrkdwn",
                            text: status_icon_func(workflow_status) + " *${{ github.workflow }}*\nWorkflow run <" + wf_run.data.html_url + "|#${{ github.run_number }}> completed in " + date_diff_func(new Date(wf_run.data.created_at), new Date(wf_run.data.updated_at))
                        }
                    },
                    {
                        type: "divider"
                    },
                    {
                        type: "section",
                        fields: fields
                    }
                ]
            }
            return slack_msg
      - name: Send to Slack
        if: success()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL}} -H "Content-type: application/json" --data '${{ steps.status.outputs.result }}'
